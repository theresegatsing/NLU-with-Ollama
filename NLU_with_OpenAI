from openai import OpenAI
from datetime import datetime
from zoneinfo import ZoneInfo

client = OpenAI()

# 1) Define schema
# used to define the structure of the data we want to extract

EVENT_SCHEMA = {
  "name": "CalendarEvent",
  "strict": True,  # enforce exact schema
  "schema": {
    "type": "object",
    "properties": {
      "intent": {
        "type": "string",
        "enum": ["CreateEvent", "MoveEvent", "CancelEvent", "AddInvitees", "QueryFreeTime"]
      },
      "title": {"type": "string"},
      "start": {"type": "string", "description": "RFC3339, e.g. 2025-09-03T16:00:00-04:00"},
      "end":   {"type": "string", "description": "RFC3339, e.g. 2025-09-03T16:45:00-04:00"},
      "timezone": {"type": "string", "default": "America/New_York"},
      "location": {"type": "string"},
      "attendees": {"type": "array", "items": {"type": "string", "description": "email or name"}},
      "recurrence": {"type": "string", "description": "RFC5545 RRULE (optional)"},
      "reminders": {
        "type": "array",
        "items": {"type": "object",
          "properties": {
            "method": {"type": "string", "enum": ["popup", "email"]},
            "minutes": {"type": "integer"}
          },
          "required": ["method", "minutes"],
          "additionalProperties": False
        }
      }
    },
    "required": ["intent"],
    "additionalProperties": False
  }
}


# 2) Extract event with OpenAI
def extract_event(utterance: str, user_tz: str = "America/New_York") -> dict:
    now = datetime.now(ZoneInfo(user_tz)).isoformat()
    system = "Extract calendar intents and slots..."
    user = f"reference_time={now}\ntimezone={user_tz}\nutterance={utterance}"
    resp = client.responses.create(
        model="gpt-4.1-mini",
        input=[{"role":"system","content":system},
               {"role":"user","content":user}],
        response_format={ "type": "json_schema", "json_schema": EVENT_SCHEMA }
    )
    return resp.output_parsed



# 3) Convert to Google Calendar payload
def to_gcal_event(nlu: dict) -> dict:
    tz = nlu.get("timezone", "America/New_York")
    ev = {
        "summary": nlu.get("title", "(No title)"),
        "start": {"dateTime": nlu["start"], "timeZone": tz} if "start" in nlu else None,
        "end":   {"dateTime": nlu["end"],   "timeZone": tz} if "end" in nlu else None,
    }
    if "location" in nlu: ev["location"] = nlu["location"]
    if "attendees" in nlu: ev["attendees"] = [{"email": a} for a in nlu["attendees"]]
    if "recurrence" in nlu: ev["recurrence"] = [nlu["recurrence"]]
    if "reminders" in nlu:
        ev["reminders"] = {"useDefault": False, "overrides": nlu["reminders"]}
    return {k:v for k,v in ev.items() if v is not None}